package Bixi.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BikeRack;
  private ConceptPresentation props_Member;
  private ConceptPresentation props_MemberMovement;
  private ConceptPresentation props_Movement;
  private ConceptPresentation props_Neighbourhood;
  private ConceptPresentation props_RandomMovement;
  private ConceptPresentation props_Redistribution;
  private ConceptPresentation props_Street;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BikeRack:
        if (props_BikeRack == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BikeRack = cpb.create();
        }
        return props_BikeRack;
      case LanguageConceptSwitch.Member:
        if (props_Member == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Member = cpb.create();
        }
        return props_Member;
      case LanguageConceptSwitch.MemberMovement:
        if (props_MemberMovement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MemberMovement");
          props_MemberMovement = cpb.create();
        }
        return props_MemberMovement;
      case LanguageConceptSwitch.Movement:
        if (props_Movement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Movement");
          props_Movement = cpb.create();
        }
        return props_Movement;
      case LanguageConceptSwitch.Neighbourhood:
        if (props_Neighbourhood == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A plan outlying the location of all resting bikes");
          cpb.presentationByName();
          props_Neighbourhood = cpb.create();
        }
        return props_Neighbourhood;
      case LanguageConceptSwitch.RandomMovement:
        if (props_RandomMovement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RandomMovement");
          props_RandomMovement = cpb.create();
        }
        return props_RandomMovement;
      case LanguageConceptSwitch.Redistribution:
        if (props_Redistribution == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Redistribution");
          props_Redistribution = cpb.create();
        }
        return props_Redistribution;
      case LanguageConceptSwitch.Street:
        if (props_Street == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Street = cpb.create();
        }
        return props_Street;
    }
    return null;
  }
}
