package Bixi.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new BikeRack_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new HorizontalStreet_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Member_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new MemberMovement_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Movement_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Neighbourhood_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new RandomMovement_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new Redistribution_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new Street_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new VerticalStreet_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x80abab196e2b414aL, 0xbf443232f0a94d40L, 0x32f20c5cdebdfb51L), MetaIdFactory.conceptId(0x80abab196e2b414aL, 0xbf443232f0a94d40L, 0x340c17a299323ce9L), MetaIdFactory.conceptId(0x80abab196e2b414aL, 0xbf443232f0a94d40L, 0x3663fa1ece76bc9cL), MetaIdFactory.conceptId(0x80abab196e2b414aL, 0xbf443232f0a94d40L, 0x3663fa1ece76bca1L), MetaIdFactory.conceptId(0x80abab196e2b414aL, 0xbf443232f0a94d40L, 0x3663fa1ece76bf33L), MetaIdFactory.conceptId(0x80abab196e2b414aL, 0xbf443232f0a94d40L, 0x32f20c5cdebdea86L), MetaIdFactory.conceptId(0x80abab196e2b414aL, 0xbf443232f0a94d40L, 0x3663fa1ece76bbd1L), MetaIdFactory.conceptId(0x80abab196e2b414aL, 0xbf443232f0a94d40L, 0x3663fa1ece76bbd2L), MetaIdFactory.conceptId(0x80abab196e2b414aL, 0xbf443232f0a94d40L, 0x32f20c5cdebdeafbL), MetaIdFactory.conceptId(0x80abab196e2b414aL, 0xbf443232f0a94d40L, 0x340c17a299323ce8L)).seal();
}
